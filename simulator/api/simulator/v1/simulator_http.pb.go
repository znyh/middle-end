// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.8.0
// source: simulator.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSimulatorOnBetReq = "/simulator.v1.Simulator/OnBetReq"
const OperationSimulatorOnCancelBetReq = "/simulator.v1.Simulator/OnCancelBetReq"
const OperationSimulatorOnGetBetListReq = "/simulator.v1.Simulator/OnGetBetListReq"
const OperationSimulatorSayHello = "/simulator.v1.Simulator/SayHello"

type SimulatorHTTPServer interface {
	OnBetReq(context.Context, *BetReq) (*BetRsp, error)
	OnCancelBetReq(context.Context, *CancelBetReq) (*CancelBetRsp, error)
	OnGetBetListReq(context.Context, *GetBetListReq) (*GetBetListRsp, error)
	// SayHello Sends a greeting
	SayHello(context.Context, *HelloReq) (*HelloRsp, error)
}

func RegisterSimulatorHTTPServer(s *http.Server, srv SimulatorHTTPServer) {
	r := s.Route("/")
	r.GET("/hello/{name}", _Simulator_SayHello0_HTTP_Handler(srv))
	r.POST("/api/OnBetReq", _Simulator_OnBetReq0_HTTP_Handler(srv))
	r.POST("/api/OnCancelBetReq", _Simulator_OnCancelBetReq0_HTTP_Handler(srv))
	r.POST("/api/OnGetBetListReq", _Simulator_OnGetBetListReq0_HTTP_Handler(srv))
}

func _Simulator_SayHello0_HTTP_Handler(srv SimulatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSimulatorSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloRsp)
		return ctx.Result(200, reply)
	}
}

func _Simulator_OnBetReq0_HTTP_Handler(srv SimulatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSimulatorOnBetReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnBetReq(ctx, req.(*BetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BetRsp)
		return ctx.Result(200, reply)
	}
}

func _Simulator_OnCancelBetReq0_HTTP_Handler(srv SimulatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelBetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSimulatorOnCancelBetReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnCancelBetReq(ctx, req.(*CancelBetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelBetRsp)
		return ctx.Result(200, reply)
	}
}

func _Simulator_OnGetBetListReq0_HTTP_Handler(srv SimulatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBetListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSimulatorOnGetBetListReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnGetBetListReq(ctx, req.(*GetBetListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBetListRsp)
		return ctx.Result(200, reply)
	}
}

type SimulatorHTTPClient interface {
	OnBetReq(ctx context.Context, req *BetReq, opts ...http.CallOption) (rsp *BetRsp, err error)
	OnCancelBetReq(ctx context.Context, req *CancelBetReq, opts ...http.CallOption) (rsp *CancelBetRsp, err error)
	OnGetBetListReq(ctx context.Context, req *GetBetListReq, opts ...http.CallOption) (rsp *GetBetListRsp, err error)
	SayHello(ctx context.Context, req *HelloReq, opts ...http.CallOption) (rsp *HelloRsp, err error)
}

type SimulatorHTTPClientImpl struct {
	cc *http.Client
}

func NewSimulatorHTTPClient(client *http.Client) SimulatorHTTPClient {
	return &SimulatorHTTPClientImpl{client}
}

func (c *SimulatorHTTPClientImpl) OnBetReq(ctx context.Context, in *BetReq, opts ...http.CallOption) (*BetRsp, error) {
	var out BetRsp
	pattern := "/api/OnBetReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSimulatorOnBetReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SimulatorHTTPClientImpl) OnCancelBetReq(ctx context.Context, in *CancelBetReq, opts ...http.CallOption) (*CancelBetRsp, error) {
	var out CancelBetRsp
	pattern := "/api/OnCancelBetReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSimulatorOnCancelBetReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SimulatorHTTPClientImpl) OnGetBetListReq(ctx context.Context, in *GetBetListReq, opts ...http.CallOption) (*GetBetListRsp, error) {
	var out GetBetListRsp
	pattern := "/api/OnGetBetListReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSimulatorOnGetBetListReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SimulatorHTTPClientImpl) SayHello(ctx context.Context, in *HelloReq, opts ...http.CallOption) (*HelloRsp, error) {
	var out HelloRsp
	pattern := "/hello/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSimulatorSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
