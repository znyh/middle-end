// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.8.0
// source: simulator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Simulator_SayHello_FullMethodName        = "/simulator.v1.Simulator/SayHello"
	Simulator_OnBetReq_FullMethodName        = "/simulator.v1.Simulator/OnBetReq"
	Simulator_OnCancelBetReq_FullMethodName  = "/simulator.v1.Simulator/OnCancelBetReq"
	Simulator_OnGetBetListReq_FullMethodName = "/simulator.v1.Simulator/OnGetBetListReq"
)

// SimulatorClient is the client API for Simulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulatorClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error)
	OnBetReq(ctx context.Context, in *BetReq, opts ...grpc.CallOption) (*BetRsp, error)
	OnCancelBetReq(ctx context.Context, in *CancelBetReq, opts ...grpc.CallOption) (*CancelBetRsp, error)
	OnGetBetListReq(ctx context.Context, in *GetBetListReq, opts ...grpc.CallOption) (*GetBetListRsp, error)
}

type simulatorClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulatorClient(cc grpc.ClientConnInterface) SimulatorClient {
	return &simulatorClient{cc}
}

func (c *simulatorClient) SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error) {
	out := new(HelloRsp)
	err := c.cc.Invoke(ctx, Simulator_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorClient) OnBetReq(ctx context.Context, in *BetReq, opts ...grpc.CallOption) (*BetRsp, error) {
	out := new(BetRsp)
	err := c.cc.Invoke(ctx, Simulator_OnBetReq_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorClient) OnCancelBetReq(ctx context.Context, in *CancelBetReq, opts ...grpc.CallOption) (*CancelBetRsp, error) {
	out := new(CancelBetRsp)
	err := c.cc.Invoke(ctx, Simulator_OnCancelBetReq_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorClient) OnGetBetListReq(ctx context.Context, in *GetBetListReq, opts ...grpc.CallOption) (*GetBetListRsp, error) {
	out := new(GetBetListRsp)
	err := c.cc.Invoke(ctx, Simulator_OnGetBetListReq_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulatorServer is the server API for Simulator service.
// All implementations must embed UnimplementedSimulatorServer
// for forward compatibility
type SimulatorServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloReq) (*HelloRsp, error)
	OnBetReq(context.Context, *BetReq) (*BetRsp, error)
	OnCancelBetReq(context.Context, *CancelBetReq) (*CancelBetRsp, error)
	OnGetBetListReq(context.Context, *GetBetListReq) (*GetBetListRsp, error)
	mustEmbedUnimplementedSimulatorServer()
}

// UnimplementedSimulatorServer must be embedded to have forward compatible implementations.
type UnimplementedSimulatorServer struct {
}

func (UnimplementedSimulatorServer) SayHello(context.Context, *HelloReq) (*HelloRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSimulatorServer) OnBetReq(context.Context, *BetReq) (*BetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnBetReq not implemented")
}
func (UnimplementedSimulatorServer) OnCancelBetReq(context.Context, *CancelBetReq) (*CancelBetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCancelBetReq not implemented")
}
func (UnimplementedSimulatorServer) OnGetBetListReq(context.Context, *GetBetListReq) (*GetBetListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetBetListReq not implemented")
}
func (UnimplementedSimulatorServer) mustEmbedUnimplementedSimulatorServer() {}

// UnsafeSimulatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulatorServer will
// result in compilation errors.
type UnsafeSimulatorServer interface {
	mustEmbedUnimplementedSimulatorServer()
}

func RegisterSimulatorServer(s grpc.ServiceRegistrar, srv SimulatorServer) {
	s.RegisterService(&Simulator_ServiceDesc, srv)
}

func _Simulator_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Simulator_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServer).SayHello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulator_OnBetReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServer).OnBetReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Simulator_OnBetReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServer).OnBetReq(ctx, req.(*BetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulator_OnCancelBetReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServer).OnCancelBetReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Simulator_OnCancelBetReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServer).OnCancelBetReq(ctx, req.(*CancelBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulator_OnGetBetListReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServer).OnGetBetListReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Simulator_OnGetBetListReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServer).OnGetBetListReq(ctx, req.(*GetBetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Simulator_ServiceDesc is the grpc.ServiceDesc for Simulator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Simulator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulator.v1.Simulator",
	HandlerType: (*SimulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Simulator_SayHello_Handler,
		},
		{
			MethodName: "OnBetReq",
			Handler:    _Simulator_OnBetReq_Handler,
		},
		{
			MethodName: "OnCancelBetReq",
			Handler:    _Simulator_OnCancelBetReq_Handler,
		},
		{
			MethodName: "OnGetBetListReq",
			Handler:    _Simulator_OnGetBetListReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simulator.proto",
}
